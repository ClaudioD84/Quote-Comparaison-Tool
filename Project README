AI-Powered Quote Comparison Tool
This Streamlit application leverages a Large Language Model (LLM) to intelligently extract data from PDF leasing quotes, compare them, and generate detailed reports. It features a "Recipe Book" system that allows for customized data extraction rules based on customer, country, and vendor.

Project Structure
app.py: The main Streamlit application file that runs the user interface and orchestrates the workflow.

modules/: A directory containing the core logic, broken down into reusable modules.

models.py: Defines the ParsedOffer dataclass, which provides a standardized structure for offer data.

pdf_parser.py: Handles text extraction from PDF files.

llm_core.py: Manages all interactions with the Google Gemini LLM, including vendor identification and data parsing.

offer_comparator.py: Contains the business logic for validating and comparing extracted offers.

report_generator.py: Responsible for creating the final side-by-side Excel comparison report.

config/: A directory for configuration files.

recipes.json: The "Recipe Book". This JSON file contains the specific prompts and instructions for the LLM. You can define rules for different customers, countries, and vendors.

requirements.txt: A list of Python packages required to run the application.

How the Recipe Book Works
The config/recipes.json file is the heart of the customization system. It allows you to guide the AI's extraction process with high precision.

The application looks for a recipe using the following fallback logic:

Customer -> Country -> Vendor (Most specific)

Default Customer -> Country -> Vendor

Default Customer -> Default -> Default Vendor (General fallback)

How to Add a New Recipe
Open config/recipes.json.

Navigate to the desired Customer and Country.

Add a new key for the Vendor you want to support (e.g., "Sixt Leasing").

Inside the vendor object, create a "prompt" key.

Write a detailed prompt explaining how to parse that vendor's specific document. You can include:

The exact labels to look for (e.g., "Find the value labeled 'Monatliche Rate' for total_monthly_lease").

Business rules (e.g., "This vendor's price always includes insurance").

Formatting quirks (e.g., "The date is in DD/MM/YYYY format").

Example:

"Germany": {
  "Sixt Leasing": {
    "prompt": "You are a specialist for German 'Sixt Leasing' quotes. The key monthly cost is under 'Monatliche Gesamtrate exkl. USt.'. This is the value for `total_monthly_lease`. Follow all other standard instructions."
  }
}

How to Run the Application
Install Dependencies:

pip install -r requirements.txt

Set API Key:

Get an API key from Google AI Studio.

You can enter the key directly in the application's sidebar.

Run Streamlit:

streamlit run app.py
