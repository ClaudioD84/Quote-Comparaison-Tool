import google.generativeai as genai
import json
import logging
import traceback
from .models import ParsedOffer

# Configure logger for this module
logger = logging.getLogger(__name__)

class LLMManager:
    """Handles all interactions with the Google Gemini Large Language Model."""

    def __init__(self, api_key: str):
        if not api_key:
            raise ValueError("An API key for the Google AI API is required.")
        try:
            genai.configure(api_key=api_key)
            logger.info("Google AI client configured successfully.")
        except Exception as e:
            raise RuntimeError(f"Failed to configure Google AI client: {e}")

    def identify_vendor(self, text: str, recipes: dict) -> str:
        """Uses the LLM to identify the vendor from document text."""
        vendor_hints = []
        for cust_data in recipes.values():
            for country_data in cust_data.values():
                vendor_hints.extend(country_data.keys())
        
        prompt = f"""
        Analyze the following document text and identify the leasing company (vendor).
        Choose the most likely vendor from this list: {', '.join(sorted(list(set(vendor_hints))))}.
        Return only the name of the vendor as a single string. For example: "Arval".

        --- DOCUMENT TEXT (first 1500 chars) ---
        {text[:1500]}
        --- END TEXT ---
        """
        try:
            model = genai.GenerativeModel('gemini-1.5-flash')
            response = model.generate_content(prompt)
            vendor = response.text.strip().replace('"', '')
            logger.info(f"LLM identified vendor as: {vendor}")
            return vendor
        except Exception as e:
            logger.error(f"Error during vendor identification: {e}")
            return "Default Vendor"

    def parse_offer(self, text: str, prompt: str) -> ParsedOffer:
        """
        Sends document text and a recipe-driven prompt to the Gemini API
        for structured data extraction.
        """
        full_prompt = f"""
        {prompt}

        --- DOCUMENT TO PARSE ---
        {text}
        --- END DOCUMENT ---
        """

        # Defines the JSON structure we expect the LLM to return
        json_schema = {
            "type": "OBJECT",
            "properties": {
                "vehicle_description": {"type": "STRING"},
                "offer_duration_months": {"type": "NUMBER"},
                "offer_total_mileage": {"type": "NUMBER"},
                "monthly_rental": {"type": "NUMBER"},
                "total_monthly_lease": {"type": "NUMBER"},
                "upfront_costs": {"type": "NUMBER"},
                "deposit": {"type": "NUMBER"},
                "excess_mileage_rate": {"type": "NUMBER"},
                "unused_mileage_rate": {"type": "NUMBER"},
                "currency": {"type": "STRING"},
                "manufacturer": {"type": "STRING"},
                "model": {"type": "STRING"},
                "version": {"type": "STRING"},
                "fuel_type": {"type": "STRING"},
                "c02_emission": {"type": "NUMBER"},
                "maintenance_repair": {"type": "NUMBER"},
                "insurance_cost": {"type": "NUMBER"},
                "management_fee": {"type": "NUMBER"},
                "tyres_cost": {"type": "NUMBER"},
                "roadside_assistance": {"type": "NUMBER"},
                "options_list": {"type": "ARRAY", "items": {"type": "OBJECT", "properties": {"name": {"type": "STRING"}, "price": {"type": "NUMBER"}}}},
                "accessories_list": {"type": "ARRAY", "items": {"type": "OBJECT", "properties": {"name": {"type": "STRING"}, "price": {"type": "NUMBER"}}}},
                "parsing_confidence": {"type": "NUMBER", "description": "Value between 0.0-1.0 for confidence."},
                "warnings": {"type": "ARRAY", "items": {"type": "STRING"}},
            },
        }

        generation_config = genai.types.GenerationConfig(
            response_mime_type="application/json",
            response_schema=json_schema
        )
        
        model = genai.GenerativeModel(
            model_name='gemini-1.5-flash',
            generation_config=generation_config
        )

        try:
            response = model.generate_content(full_prompt)
            extracted_data = json.loads(response.text)
            logger.info("Successfully parsed offer data from LLM response.")
            # Ensure list fields exist even if the LLM omits them
            extracted_data['options_list'] = extracted_data.get('options_list', [])
            extracted_data['accessories_list'] = extracted_data.get('accessories_list', [])
            return ParsedOffer(**extracted_data)
        except Exception as e:
            logger.error(f"Error during LLM parsing: {str(e)}\n{traceback.format_exc()}")
            return ParsedOffer(warnings=[f"LLM parsing failed: {e}"])
