import pandas as pd
import io
from typing import List
from .models import ParsedOffer, asdict

def generate_excel_report(offers: List[ParsedOffer]) -> io.BytesIO:
    """
    Creates a side-by-side comparison Excel report from a list of offers.

    Args:
        offers: A list of ParsedOffer objects to compare.

    Returns:
        An in-memory BytesIO buffer containing the Excel file.
    """
    if not offers:
        return io.BytesIO()

    # Create a DataFrame from the list of ParsedOffer objects
    data = [asdict(offer) for offer in offers]
    df = pd.DataFrame(data)

    # Transpose the DataFrame for a side-by-side view
    df_transposed = df.set_index('filename').transpose()
    df_transposed.index.name = "Field"
    
    # Clean up list-based fields for better readability
    for col in df_transposed.columns:
        for field in ['options_list', 'accessories_list', 'warnings']:
            if field in df_transposed.index:
                items = df_transposed.loc[field, col]
                if isinstance(items, list) and items:
                    # For equipment, join names. For warnings, join strings.
                    if field in ['options_list', 'accessories_list']:
                        display_str = ", ".join(sorted([str(item.get('name', '')) for item in items]))
                    else: # warnings
                        display_str = ", ".join(items)
                    df_transposed.loc[field, col] = display_str
                else:
                    df_transposed.loc[field, col] = "" # Empty string if no items

    output_buffer = io.BytesIO()
    with pd.ExcelWriter(output_buffer, engine='xlsxwriter') as writer:
        df_transposed.to_excel(writer, sheet_name='Side-by-Side Comparison')
        
        # --- Formatting ---
        workbook  = writer.book
        worksheet = writer.sheets['Side-by-Side Comparison']
        header_format = workbook.add_format({'bold': True, 'bg_color': '#DDEBF7', 'border': 1})
        
        # Format headers
        for col_num, value in enumerate(df_transposed.columns.values):
            worksheet.write(0, col_num + 1, value, header_format)
        
        # Set column widths for readability
        worksheet.set_column('A:A', 30) # Field names
        worksheet.set_column('B:Z', 40) # Offer data

    output_buffer.seek(0)
    return output_buffer
